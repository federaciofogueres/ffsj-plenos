/**
 * Plenos API
 * API para gestionar consultas de usuarios.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {
    HttpClient,
    HttpEvent,
    HttpHeaders,
    HttpResponse
} from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';

import { Observable } from 'rxjs';

import { Asistencia } from '../model/asistencia';
import { ResponseAsistencias } from '../model/responseAsistencias';
import { Status } from '../model/status';

import { Configuration } from '../configuration';
import { BASE_PATH } from '../variables';


@Injectable({providedIn: 'root'})
export class AsistenciaService {

    protected basePath = 'https://virtserver.swaggerhub.com/FFSJ/APP-Plenos/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Obtener todas las asistencias
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaGet(observe?: 'body', reportProgress?: boolean): Observable<ResponseAsistencias>;
    public asistenciaGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAsistencias>>;
    public asistenciaGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAsistencias>>;
    public asistenciaGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseAsistencias>('get',`${this.basePath}/asistencia`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtener una asistencia por ID
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<Asistencia>;
    public asistenciaIdGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Asistencia>>;
    public asistenciaIdGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Asistencia>>;
    public asistenciaIdGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling asistenciaIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Asistencia>('get',`${this.basePath}/asistencia/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Confirmar una nueva asistencia
     * 
     * @param idPleno 
     * @param idAsociado 
     * @param nifAsociado 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost(idPleno: number, idAsociado: number, nifAsociado: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost(idPleno: number, idAsociado: number, nifAsociado: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost(idPleno: number, idAsociado: number, nifAsociado: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost(idPleno: number, idAsociado: number, nifAsociado: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPleno === null || idPleno === undefined) {
            throw new Error('Required parameter idPleno was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost.');
        }

        if (idAsociado === null || idAsociado === undefined) {
            throw new Error('Required parameter idAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost.');
        }

        if (nifAsociado === null || nifAsociado === undefined) {
            throw new Error('Required parameter nifAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoDelegacionNifAsociadoPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('post',`${this.basePath}/asistencia/${encodeURIComponent(String(idPleno))}/asociados/${encodeURIComponent(String(idAsociado))}/delegacion/${encodeURIComponent(String(nifAsociado))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Eliminar una asistencia por ID
     * 
     * @param idPleno 
     * @param idAsociado 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdPlenoAsociadosIdAsociadoDelete(idPleno: number, idAsociado: number, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelete(idPleno: number, idAsociado: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelete(idPleno: number, idAsociado: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoDelete(idPleno: number, idAsociado: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPleno === null || idPleno === undefined) {
            throw new Error('Required parameter idPleno was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoDelete.');
        }

        if (idAsociado === null || idAsociado === undefined) {
            throw new Error('Required parameter idAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('delete',`${this.basePath}/asistencia/${encodeURIComponent(String(idPleno))}/asociados/${encodeURIComponent(String(idAsociado))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtener una asistencia por idPleno e idAsociado
     * 
     * @param idPleno 
     * @param idAsociado 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdPlenoAsociadosIdAsociadoGet(idPleno: number, idAsociado: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseAsistencias>;
    public asistenciaIdPlenoAsociadosIdAsociadoGet(idPleno: number, idAsociado: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseAsistencias>>;
    public asistenciaIdPlenoAsociadosIdAsociadoGet(idPleno: number, idAsociado: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseAsistencias>>;
    public asistenciaIdPlenoAsociadosIdAsociadoGet(idPleno: number, idAsociado: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPleno === null || idPleno === undefined) {
            throw new Error('Required parameter idPleno was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoGet.');
        }

        if (idAsociado === null || idAsociado === undefined) {
            throw new Error('Required parameter idAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseAsistencias>('get',`${this.basePath}/asistencia/${encodeURIComponent(String(idPleno))}/asociados/${encodeURIComponent(String(idAsociado))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Confirmar una nueva asistencia
     * 
     * @param idPleno 
     * @param idAsociado 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdPlenoAsociadosIdAsociadoPost(idPleno: number, idAsociado: number, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public asistenciaIdPlenoAsociadosIdAsociadoPost(idPleno: number, idAsociado: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoPost(idPleno: number, idAsociado: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoPost(idPleno: number, idAsociado: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPleno === null || idPleno === undefined) {
            throw new Error('Required parameter idPleno was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoPost.');
        }

        if (idAsociado === null || idAsociado === undefined) {
            throw new Error('Required parameter idAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('post',`${this.basePath}/asistencia/${encodeURIComponent(String(idPleno))}/asociados/${encodeURIComponent(String(idAsociado))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Actualizar una asistencia por ID
     * 
     * @param body 
     * @param idPleno 
     * @param idAsociado 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaIdPlenoAsociadosIdAsociadoPut(body: Asistencia, idPleno: number, idAsociado: number, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public asistenciaIdPlenoAsociadosIdAsociadoPut(body: Asistencia, idPleno: number, idAsociado: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoPut(body: Asistencia, idPleno: number, idAsociado: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public asistenciaIdPlenoAsociadosIdAsociadoPut(body: Asistencia, idPleno: number, idAsociado: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoPut.');
        }

        if (idPleno === null || idPleno === undefined) {
            throw new Error('Required parameter idPleno was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoPut.');
        }

        if (idAsociado === null || idAsociado === undefined) {
            throw new Error('Required parameter idAsociado was null or undefined when calling asistenciaIdPlenoAsociadosIdAsociadoPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Status>('put',`${this.basePath}/asistencia/${encodeURIComponent(String(idPleno))}/asociados/${encodeURIComponent(String(idAsociado))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Crear una nueva asistencia
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public asistenciaPost(body: Asistencia, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public asistenciaPost(body: Asistencia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public asistenciaPost(body: Asistencia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public asistenciaPost(body: Asistencia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling asistenciaPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Status>('post',`${this.basePath}/asistencia`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
